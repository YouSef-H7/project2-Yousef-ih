name: Infrastructure - Terraform Plan & Apply

on:
  pull_request:
    paths:
      - 'terraform/**'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options: [ plan, apply ]
        default: 'plan'

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  tf_plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: write
    outputs:
      unsafe: ${{ steps.guard.outputs.unsafe }}
      plan_exit_code: ${{ steps.plan.outputs.exit_code }}
    defaults:
      run:
        working-directory: terraform/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        shell: bash
        run: |
          exit_code=0
          [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] && echo "::error::Missing secret AZURE_CLIENT_ID" && exit_code=1
          [ -z "${{ secrets.AZURE_CLIENT_SECRET }}" ] && echo "::error::Missing secret AZURE_CLIENT_SECRET" && exit_code=1
          [ -z "${{ secrets.AZURE_TENANT_ID }}" ] && echo "::error::Missing secret AZURE_TENANT_ID" && exit_code=1
          [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ] && echo "::error::Missing secret AZURE_SUBSCRIPTION_ID" && exit_code=1
          exit $exit_code

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.8'
          terraform_wrapper: false

      - name: Clean Terraform cache
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl
          rm -f terraform.tfstate*

      - name: Terraform Init
        run: terraform init -backend-config=../backend.hcl -reconfigure -input=false -lock-timeout=5m

      - name: Terraform Validate
        continue-on-error: true
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -lock-timeout=5m -detailed-exitcode 2>&1 | tee plan.txt
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          set -e
          echo "exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Handle different exit codes
          if [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "::notice::No changes. Infrastructure is up-to-date."
          elif [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "::error::Terraform plan failed with errors"
            exit 1
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "::notice::Terraform plan succeeded with changes"
          else
            echo "::warning::Terraform plan exited with code: $PLAN_EXIT_CODE"
          fi

      - name: Export plan as JSON
        if: steps.plan.outputs.exit_code == '0' || steps.plan.outputs.exit_code == '2'
        run: terraform show -json tfplan.bin > plan.json

      - name: Guard against destructive changes
        id: guard
        if: steps.plan.outputs.exit_code == '0' || steps.plan.outputs.exit_code == '2'
        run: |
          SENSITIVE_TYPES='["azurerm_mssql_server","azurerm_virtual_network","azurerm_subnet","azurerm_private_endpoint","azurerm_private_dns_zone"]'
          MATCHES=$(jq --argjson types "$SENSITIVE_TYPES" '
            .resource_changes
            | map(select( (.type as $t | $types | index($t))
                          and ((.change.actions | index("delete"))
                               or (.change.actions | index("replace"))) ))
            | length
          ' plan.json 2>/dev/null || echo "0")
          
          echo "Found $MATCHES destructive/replace change(s) on sensitive resource types."
          if [ "$MATCHES" -gt 0 ]; then
            echo "unsafe=true" >> $GITHUB_OUTPUT
            echo "::error::Plan contains delete/replace operations on SENSITIVE resources. Blocking apply."
            exit 1
          else
            echo "unsafe=false" >> $GITHUB_OUTPUT
            echo "✓ No destructive changes on sensitive resources detected."
          fi

      - name: Upload plan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: |
            terraform/main/tfplan.bin
            terraform/main/plan.txt
            terraform/main/plan.json
          retention-days: 30

      - name: Post PR comment with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN_EXIT_CODE: ${{ steps.plan.outputs.exit_code }}
          GUARD_UNSAFE: ${{ steps.guard.outputs.unsafe }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planPath = 'terraform/main/plan.txt';
            let planText = '';
            try { 
              planText = fs.readFileSync(planPath, 'utf8'); 
            } catch (e) { 
              planText = 'Plan file not available. Check workflow logs for details.';
            }
            
            const maxLength = 60000;
            const truncated = planText.length > maxLength
              ? planText.substring(0, maxLength) + '\n\n... (plan truncated due to length)'
              : planText;

            const planExit = process.env.PLAN_EXIT_CODE || '';
            const guardUnsafe = process.env.GUARD_UNSAFE || '';
            
            let status = '⏳ Unknown';
            if (planExit === '0') status = '✅ No Changes';
            else if (planExit === '2') status = '📝 Changes Required';
            else if (planExit === '1') status = '❌ Failed';
            
            const guard = guardUnsafe === 'true'
              ? '❌ Blocked (destructive changes detected)'
              : planExit === '1' ? '⚠️ Skipped (plan failed)' : '✅ Clear';

            const lines = [
              '### Terraform Plan Results 📋',
              '',
              '<details><summary>Show Plan Output</summary>',
              '',
              '```terraform',
              truncated,
              '```',
              '',
              '</details>',
              '',
              `**Plan Status:** ${status}  `,
              `**Sensitive Guard:** ${guard}  `,
              `**Triggered by:** @${context.actor}  `,
              `**Commit:** ${context.sha.substring(0, 8)}  `,
            ];
            const body = lines.join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

  tf_apply:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: tf_plan
    if: |
      (needs.tf_plan.result == 'success' || needs.tf_plan.outputs.plan_exit_code == '0' || needs.tf_plan.outputs.plan_exit_code == '2') &&
      needs.tf_plan.outputs.unsafe != 'true' && (
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      )
    environment: production
    permissions:
      contents: read
    defaults:
      run:
        working-directory: terraform/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.8'
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend-config=../backend.hcl -reconfigure -input=false -lock-timeout=5m

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: terraform/main

      - name: Verify plan file
        run: |
          if [ ! -f "tfplan.bin" ]; then
            echo "::error::Plan file tfplan.bin not found!"
            exit 1
          fi
          echo "✓ Plan file verified."

      - name: Terraform Apply
        run: |
          set -e
          terraform apply -auto-approve -input=false -lock-timeout=10m tfplan.bin

      - name: Get outputs
        if: always()
        run: |
          terraform output -json > outputs.json 2>/dev/null || echo "No outputs available"
          cat outputs.json || true

      - name: Upload apply logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tf-apply-outputs-${{ github.sha }}
          path: |
            terraform/main/outputs.json
          retention-days: 7