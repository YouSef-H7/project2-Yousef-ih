# Infrastructure Terraform Plan & Apply (Service Principal Secret - Option 2)
#
# Triggers:
#   - PR على مسار terraform/** → Plan فقط
#   - Push إلى main على نفس المسار → Apply (ممكن تفعّل بيئة prod للموافقة اليدوية)
#   - workflow_dispatch (تختار plan/apply)
#
# Required Secrets (Repository → Settings → Secrets and variables → Actions → Secrets):
#   - AZURE_CLIENT_ID
#   - AZURE_CLIENT_SECRET
#   - AZURE_TENANT_ID
#   - AZURE_SUBSCRIPTION_ID
#
# (ملاحظة: هنا ما نستخدم OIDC ولا AZURE_CREDENTIALS JSON)
#
# Notes:
#   - Terraform root: terraform
#   - Guard يمنع delete/replace للموارد الحساسة

name: Infrastructure - Terraform Plan & Apply (SP Secret)

on:
  pull_request:
    paths:
      - 'terraform/**'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options: [ plan, apply ]
        default: 'plan'

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  # تمرير بيانات الـ SP للـ Terraform AzureRM provider
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  tf_plan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: write
    outputs:
      unsafe: ${{ steps.guard.outputs.unsafe }}
    defaults:
      run:
        working-directory: terraform/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        shell: bash
        run: |
          exit_code=0
          [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] && echo "::error::Missing secret AZURE_CLIENT_ID" && exit_code=1
          [ -z "${{ secrets.AZURE_CLIENT_SECRET }}" ] && echo "::error::Missing secret AZURE_CLIENT_SECRET" && exit_code=1
          [ -z "${{ secrets.AZURE_TENANT_ID }}" ] && echo "::error::Missing secret AZURE_TENANT_ID" && exit_code=1
          [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ] && echo "::error::Missing secret AZURE_SUBSCRIPTION_ID" && exit_code=1
          exit $exit_code

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: |
            {"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"}

      - name: Who am I
        run: az account show -o table

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.8'
          terraform_wrapper: false

      - name: Where am I and what TF files
        run: |
          pwd
          ls -la
          ls -la *.tf || true

      - name: Show container_app module code (debug)
        shell: bash
        run: |
          echo "Commit: $GITHUB_SHA"
          git --no-pager log -1 --oneline || true
          echo "--- ../modules/container_app/main.tf (first 80 lines) ---"
          sed -n '1,80p' ../modules/container_app/main.tf | nl -ba
          echo "--- grep for_each in module ---"
          grep -n 'for_each' ../modules/container_app/main.tf || true

      - name: Clean Terraform cache
        run: rm -rf .terraform .terraform.lock.hcl || true

      - name: Terraform Init
        run: terraform init -backend-config=../backend.hcl -reconfigure -input=false -lock-timeout=5m

      # Skipping validate due to Terraform's overly strict for_each validation
      # Plan is the authoritative check and will catch real errors
      # - name: Terraform Validate
      #   continue-on-error: true
      #   run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          set +e
          terraform plan -no-color -out=tfplan.bin -lock-timeout=5m 2>&1 | tee plan.txt
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          set -e
          echo "exit_code=${PLAN_EXIT_CODE}" >> $GITHUB_OUTPUT
          if [ $PLAN_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform plan failed"
            exit $PLAN_EXIT_CODE
          fi

      - name: Export plan as JSON
        run: terraform show -json tfplan.bin > plan.json

      - name: Guard against destructive changes on sensitive resources
        id: guard
        run: |
          SENSITIVE_TYPES='["azurerm_mssql_server","azurerm_virtual_network","azurerm_subnet","azurerm_private_endpoint","azurerm_private_dns_zone"]'
          MATCHES=$(jq --argjson types "$SENSITIVE_TYPES" '
            .resource_changes
            | map(select( (.type as $t | $types | index($t))
                          and ((.change.actions | index("delete"))
                               or (.change.actions | index("replace"))) ))
            | length
          ' plan.json)
          echo "Found $MATCHES destructive/replace change(s) on sensitive resource types."
          if [ "$MATCHES" -gt 0 ]; then
            echo "unsafe=true" >> $GITHUB_OUTPUT
            echo "::error::Plan contains delete/replace operations on SENSITIVE resources. Blocking apply."
            exit 1
          else
            echo "unsafe=false" >> $GITHUB_OUTPUT
            echo "✓ No destructive changes on sensitive resources detected. Safe to proceed."
          fi

      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: |
            terraform/main/tfplan.bin
            terraform/main/plan.txt
            terraform/main/plan.json
          retention-days: 30

      - name: Post PR comment with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN_EXIT_CODE: ${{ steps.plan.outputs.exit_code }}
          GUARD_UNSAFE: ${{ steps.guard.outputs.unsafe }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planPath = 'terraform/main/plan.txt';
            let planText = '';
            try { planText = fs.readFileSync(planPath, 'utf8'); } catch (e) { planText = '(plan.txt not found)'; }
            const maxLength = 65000;
            const truncated = planText.length > maxLength
              ? planText.substring(0, maxLength) + '\n\n... (plan truncated due to length)'
              : planText;

            const planExit = process.env.PLAN_EXIT_CODE || '';
            const guardUnsafe = process.env.GUARD_UNSAFE || '';
            const status = planExit === '0' ? '✅ Success' : '❌ Failed';
            const guard = guardUnsafe === 'true'
              ? '❌ Blocked (destructive changes on sensitive resources)'
              : '✅ Clear';

            const lines = [
              '### Terraform Plan Results 📋',
              '',
              '<details><summary>Show Plan Output</summary>',
              '',
              '```terraform',
              truncated,
              '```',
              '',
              '</details>',
              '',
              `**Plan Status:** ${status}  `,
              `**Sensitive Guard:** ${guard}  `,
              `**Triggered by:** @${context.actor}  `,
              `**Commit:** ${context.sha}  `,
            ];
            const body = lines.join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

  tf_apply:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: tf_plan
    if: |
      needs.tf_plan.outputs.unsafe != 'true' && (
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      )
    # environment: prod  # فعّلها لو تبغى موافقة يدوية قبل التنفيذ
    permissions:
      contents: read
    defaults:
      run:
        working-directory: terraform/main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: |
            {"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"}

      - name: Who am I
        run: az account show -o table

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.8'
          terraform_wrapper: false

      - name: Clean Terraform cache
        run: rm -rf .terraform .terraform.lock.hcl || true

      - name: Terraform Init
        run: terraform init -backend-config=../backend.hcl -reconfigure -input=false -lock-timeout=5m

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: terraform/main

      - name: Terraform Apply
        run: terraform apply -auto-approve -lock-timeout=5m tfplan.bin
        env:
          TF_LOG: INFO

      - name: Mask sensitive outputs
        if: always()
        run: |
          echo "::add-mask::${{ secrets.AZURE_CLIENT_ID }}"
          echo "::add-mask::${{ secrets.AZURE_CLIENT_SECRET }}"
          echo "::add-mask::${{ secrets.AZURE_TENANT_ID }}"
          echo "::add-mask::${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Upload apply logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: tf-apply-logs-${{ github.sha }}
          path: |
            terraform/main/.terraform/**
            terraform/main/terraform.tfstate.backup
          retention-days: 7
